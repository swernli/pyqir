main(i64 nrIter):
  label entry
  # qubit 0 is 'target'
  # qubit 1 is 'aux'
  Microsoft__Quantum__Qir__Emission__Prepare__body([0])
  if nrIter < 1:
    mu.0.lcssa = 7.951000e-01
    jump exit__1
  else:
    temp0 = 1
    sigma.03 = 6.065000e-01
    mu.02 = 7.951000e-01
    jump body__1
  label body__1
  c1 =  Microsoft__Quantum__Qir__Emission__ClassicalComputeInput1__body(mu.02, sigma.03)
  c2 =  Microsoft__Quantum__Qir__Emission__ClassicalComputeInput2__body(mu.02, sigma.03)
  datum =  Microsoft__Quantum__Qir__Emission__Iterate__body([0, 1], c1, c2)
  temp1 =  Microsoft__Quantum__Qir__Emission__ClassicalUpdateMu__body(mu.02, sigma.03, datum)
  temp2 =  Microsoft__Quantum__Qir__Emission__ClassicalUpdateSigma__body(sigma.03)
  temp3 = temp0 + 1
  if temp3 > nrIter:
    mu.0.lcssa = temp1
    jump exit__1
  else:
    temp0 = temp3
    sigma.03 = temp2
    mu.02 = temp1
    jump body__1
  label exit__1
  return mu.0.lcssa

Microsoft__Quantum__Qir__Emission__Prepare__body([target]):
  h(target = 'target', control = '', args = [])

Microsoft__Quantum__Qir__Emission__Iterate__body([target, aux], c1, c2):
  h(target = 'aux', control = '', args = [])
  rz(target = 'aux', control = '', args = [c1])
  crz(target = 'target', control = 'aux', args = [c2])
  h(target = 'aux', control = '', args = [])
  result.i = measure(target = 'aux', control = '', args = [])
  reset(target = 'aux', control = '', args = [])
  return result.i

Microsoft__Quantum__Qir__Emission__ClassicalComputeInput1__body(mu, sigma):
  temp0 = mu / sigma
  temp1 = 0x3FF921FB54442D18 - temp0
  return temp1

Microsoft__Quantum__Qir__Emission__ClassicalComputeInput2__body(mu, sigma):
  temp0 = sigma * 0x400921FB54442D18
  temp1 = temp0 * 5.000000e-01
  temp2 = mu - temp1
  temp3 = temp2 * 0x400921FB54442D18
  return temp3

Microsoft__Quantum__Qir__Emission__ClassicalUpdateMu__body(mu, sigma, res):
  temp0 =  __quantum__rt__result_get_zero()
  temp1 =  __quantum__rt__result_equal(res, temp0)
  temp2 = sigma * 6.065000e-01
  temp3 = -(temp2)
  if temp1 == 1:
    .p = temp3
  else:
    .p = temp2
  temp4 = .p + mu
  return temp4

Microsoft__Quantum__Qir__Emission__ClassicalUpdateSigma__body(sigma):
  temp0 = sigma * 7.951000e-01
  return temp0
